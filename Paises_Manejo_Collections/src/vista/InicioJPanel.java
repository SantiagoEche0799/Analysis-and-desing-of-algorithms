/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelador.Pais;

/**
 *
 * @author Camilo y Roberth
 */
public class InicioJPanel extends javax.swing.JPanel {

    private Principal principal;
    private File fichero; // Ruta del fichero a modificar
    private LinkedList paisesGuardar = new LinkedList();// Paises a guardar

    /**
     * Creates new form IntentoInicioSeccion
     */
    public InicioJPanel(Principal principal) {
        this.principal = principal;
        initComponents();
        //infoPaises=new DefaultListModel();
        //ListaDePaises.setModel(infoPaises);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        jLabelNombrePais = new javax.swing.JLabel();
        jTextFieldNombrePais = new javax.swing.JTextField();
        jLabelNumContagiados = new javax.swing.JLabel();
        jTextFieldNumContagiados = new javax.swing.JTextField();
        jLabelNumMuertes = new javax.swing.JLabel();
        jTextFieldNumMuertes = new javax.swing.JTextField();
        jLabelTituloMenu = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListPaises = new javax.swing.JList();

        jPanel1.setBackground(new java.awt.Color(33, 33, 33));
        jPanel1.setForeground(new java.awt.Color(33, 33, 33));

        jLabelTitulo.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        jLabelTitulo.setForeground(new java.awt.Color(213, 0, 0));
        jLabelTitulo.setText("COVID-19");

        jLabelNombrePais.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabelNombrePais.setForeground(new java.awt.Color(213, 0, 0));
        jLabelNombrePais.setText("Nombre del pais: ");

        jLabelNumContagiados.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabelNumContagiados.setForeground(new java.awt.Color(213, 0, 0));
        jLabelNumContagiados.setText("Num. contagiados");

        jLabelNumMuertes.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabelNumMuertes.setForeground(new java.awt.Color(213, 0, 0));
        jLabelNumMuertes.setText("Num. muertes");

        jTextFieldNumMuertes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNumMuertesActionPerformed(evt);
            }
        });

        jLabelTituloMenu.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabelTituloMenu.setForeground(new java.awt.Color(213, 0, 0));
        jLabelTituloMenu.setText(".:MENU:.");

        jButton1.setText("Borrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modificar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Agregar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Buscar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jListPaises);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(jLabelTitulo))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jLabelTituloMenu))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNombrePais)
                            .addComponent(jLabelNumMuertes))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNumContagiados, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNombrePais, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNumMuertes, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton3)
                    .addComponent(jLabelNumContagiados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(49, 49, 49))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabelTitulo)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombrePais)
                    .addComponent(jTextFieldNombrePais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumContagiados)
                    .addComponent(jTextFieldNumContagiados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumMuertes)
                    .addComponent(jTextFieldNumMuertes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jLabelTituloMenu)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        agregar();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            borrar();
        } catch (java.lang.NullPointerException e1) {
            JOptionPane.showMessageDialog(this, "El pais no existe", "Error al eliminar el pais", JOptionPane.INFORMATION_MESSAGE);
        } catch (java.lang.ArrayIndexOutOfBoundsException e2) {
            JOptionPane.showMessageDialog(this, "El pais no existe", "Error al eliminar el pais", JOptionPane.INFORMATION_MESSAGE);
        } catch (java.lang.NegativeArraySizeException e3) {
            borrar();
        }    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        borrar();
        agregar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            buscarParaModificar();
        } catch (java.lang.NullPointerException e1) {
            JOptionPane.showMessageDialog(this, "El pais no existe", "Error al buscar el pais", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextFieldNumMuertesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNumMuertesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNumMuertesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabelNombrePais;
    private javax.swing.JLabel jLabelNumContagiados;
    private javax.swing.JLabel jLabelNumMuertes;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JLabel jLabelTituloMenu;
    private javax.swing.JList jListPaises;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldNombrePais;
    private javax.swing.JTextField jTextFieldNumContagiados;
    private javax.swing.JTextField jTextFieldNumMuertes;
    // End of variables declaration//GEN-END:variables

    private void agregar() {
        try {
            String nombrePais = jTextFieldNombrePais.getText();
            String numContagiados = jTextFieldNumContagiados.getText();
            int contagiados = Integer.parseInt(numContagiados);
            String numMuertos = jTextFieldNumMuertes.getText();
            int muertes = Integer.parseInt(numMuertos);

            Pais actual = new Pais(nombrePais, contagiados, muertes);
            System.out.println(actual);
            boolean valor = principal.controladorPais.agregar(actual);
            if (valor == false) {
                JOptionPane.showMessageDialog(this, "El pais ya existe", "Error al agregar el nuevo pais", JOptionPane.INFORMATION_MESSAGE);
            } else if (valor == true) {
                principal.controladorPais.agregar(actual);
                agregarFiles();
                guardarArchivo();
                actualizarLista();
            }
        } catch (java.lang.NumberFormatException e2) {
            JOptionPane.showMessageDialog(this, "Tiene un campo donde el valor no es valido o esta vacio", "Error al agregar el nuevo pais", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void borrar() {
        String nombre = jTextFieldNombrePais.getText();
        principal.controladorPais.eliminar(nombre);
        borrarArchivo();
        actualizarLista();

    }

    private void llenarCampos(Pais pais) {
        String nombre = jTextFieldNombrePais.getText();
        jTextFieldNombrePais.setText(principal.getControladorPais().buscarPorNombre(nombre).getNombrePais());
        int cantidadContagiadosInt = principal.getControladorPais().buscarPorNombre(nombre).getNumContagiados();
        String cantidadContagiadosString = Integer.toString(cantidadContagiadosInt);
        jTextFieldNumContagiados.setText(cantidadContagiadosString);
        int cantidadMuertesInt = principal.getControladorPais().buscarPorNombre(nombre).getNumContagiados();
        String cantidadMuertesString = Integer.toString(cantidadMuertesInt);
        jTextFieldNumContagiados.setText(cantidadMuertesString);
    }

    private void buscarParaModificar() {
        String nombre = jTextFieldNombrePais.getText();
        Pais actual = principal.controladorPais.buscarPorNombre(nombre);
        consultarArchivo();
        llenarCampos(actual);
    }

    public void actualizarLista() {
        String[] paises = principal.controladorPais.darPaises();
        //System.out.println(""+libros.length);
        //System.out.println(""+libros[0]);
        this.jListPaises.setListData((String[]) paises);
    }

    private void agregarFiles() {
        String nuevoItem; // String con nombre del pais, num. contagiados y muertes
        nuevoItem = jTextFieldNombrePais.getText() + " " + jTextFieldNumContagiados.getText() + " " + jTextFieldNumMuertes.getText() + " \n";
        paisesGuardar.add(nuevoItem);
    }

    private void guardarArchivo() {

        BufferedWriter writer; //Para escribir en el fichero

        if (fichero == null) {
            //Activamos el filtro para que nos muestre, por defecto, los archivos de texto
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto", "txt");
            JFileChooser fileChooserGuardar = new JFileChooser();
            fileChooserGuardar.setFileFilter(filtro);
            fileChooserGuardar.setDialogTitle("Guardar");
            int seleccion = fileChooserGuardar.showSaveDialog(this);

            if (seleccion == JFileChooser.APPROVE_OPTION) {
                fichero = fileChooserGuardar.getSelectedFile();
                fileChooserGuardar.setFileSelectionMode(JFileChooser.FILES_ONLY);
                try {
                    writer = new BufferedWriter(new FileWriter(fichero + ".txt")); // Ponemos .txt para darle extension al archivo que creamos
                    while (!paisesGuardar.isEmpty()) {
                        writer.write(paisesGuardar.poll().toString());
                        writer.newLine();
                    }
                    writer.flush();
                    writer.close();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error guardar archivo", JOptionPane.ERROR_MESSAGE);
                }

                JOptionPane.showMessageDialog(this, "El fichero de texto se ha guardado correctamente con los datos introducidos");
            }
        } else if (!(fichero == null)) // Añadimos al fichero existente
        {
            try {
                writer = new BufferedWriter(new FileWriter(fichero, true));
                while (!paisesGuardar.isEmpty()) {
                    writer.write(paisesGuardar.poll().toString());
                    writer.newLine();
                }
                writer.flush();
                writer.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error guardar archivo", JOptionPane.ERROR_MESSAGE);
            }
            JOptionPane.showMessageDialog(this, "El fichero de texto se ha guardado correctamente con los datos introducidos");
        } else {
            JOptionPane.showMessageDialog(this, "ERROR: Error al guardar", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void borrarArchivo() {

        String limite = " "; // Elemento que separa el nombre y los numeros
        String[] trozos; // Dividimos la linea del dichero en unidades independientes
        String nombre; // Nombre del sitio que el usuario ha introducido en el cuadro de texto
        String nombreTrozo; // Nombre del sitio dentro del string trozos
        Boolean encontrado = false;
        LinkedList<String> paraGuardar = new LinkedList(); // Almacenamos todas las lineas que no son las que queremos borrar, para despues volverlas a guardar

        if (jTextFieldNombrePais.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "El campo del nombre del sitio está vacío", "Campo vacío", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {

                BufferedReader reader = new BufferedReader(new FileReader(fichero));  // Cargamos el fichero para lectura
                String linea = reader.readLine(); // Leemos la primera linea

                if (linea == null) {
                    JOptionPane.showMessageDialog(this, "El fichero está vacío", "Fichero vacío", JOptionPane.INFORMATION_MESSAGE);
                    reader.close();// Cerramos el fichero para lectura
                } else {
                    do {

                        trozos = linea.split(limite, 3); //Dividimos la linea leida en tres parte

                        nombre = jTextFieldNombrePais.getText().toUpperCase();
                        nombreTrozo = trozos[0].toUpperCase();

                        if (!nombreTrozo.equals(nombre)) {
                            //Comprobamos que la linea no sea vacia. Si es vacia, no la guardamos
                            if (!nombreTrozo.equals("")) {
                                paraGuardar.add(linea);
                            }
                        } else {
                            encontrado = true;
                        }

                        linea = reader.readLine(); // leemos la siguiente línea

                    } while (linea != null);

                    reader.close();// Cerramos el fichero para lectura

                    if (!encontrado) {
                        JOptionPane.showMessageDialog(this, "No hay ningun sitio con ese nombre", "No está el sitio", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        BufferedWriter writer = new BufferedWriter(new FileWriter(fichero));
                        while (!paraGuardar.isEmpty()) {
                            writer.write(paraGuardar.poll().toString());
                            writer.newLine();
                        }
                        writer.flush();
                        writer.close();
                        JOptionPane.showMessageDialog(this, "Eliminado con éxito", "Eliminado", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch (IOException ex) {

            }
        }
    }

    private void consultarArchivo() {

        String limite = " "; // Elemento que separa el nombre y los numeros
        String[] trozos; // Dividimos la linea del dichero en unidades independientes
        String nombre; // Nombre del sitio que el usuario ha introducido en el cuadro de texto
        String nombreTrozo; // Nombre del sitio dentro del string trozos
        Boolean encontrado = false; // Para saber si hemos encontrado el sitio que buscabamos

        jTextFieldNumContagiados.setText("");
        jTextFieldNumMuertes.setText("");

        if (jTextFieldNombrePais.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "El campo del nombre del sitio está vacío", "Campo vacío", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {

                BufferedReader reader = new BufferedReader(new FileReader(fichero));  // Cargamos el fichero
                String linea = reader.readLine(); // leemos la primera linea

                if (linea == null) {
                    JOptionPane.showMessageDialog(this, "El fichero está vacío", "Fichero vacío", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    do {
                        trozos = linea.split(limite, 3); //Dividimos la linea leida en tres parte

                        nombre = jTextFieldNombrePais.getText().toUpperCase();
                        nombreTrozo = trozos[0].toUpperCase();

                        if (nombreTrozo.equals(nombre)) {
                            encontrado = true;
                            jTextFieldNumContagiados.setText(trozos[1]);
                            jTextFieldNumMuertes.setText(trozos[2]);
                        }

                        linea = reader.readLine(); // leemos la siguiente línea

                    } while (linea != null);

                    if (!encontrado) {
                        JOptionPane.showMessageDialog(this, "No se han encontrado coincidencias", "No hay coincidencias", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                reader.close();// Cerramos el fichero

            } catch (IOException ex) {
            }
        }
    }

}
